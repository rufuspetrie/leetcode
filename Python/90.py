# Initial thoughts
    # Similar to the other subset problem, but can't use duplicates
    # To avoid duplicates, sort the array
    # When making DFS branch not including an element, move the pointer ahead
        # until the next element in order to avoid duplicates
        # (all possible uses of the element will be generated by the first inclusion branch)
class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        subsets = []
        nums.sort()

        subset = []
        def dfs(idx = 0):
            if idx >= len(nums):
                subsets.append(subset[:])
                return

            # Include element
            subset.append(nums[idx])
            dfs(idx + 1)

            # Do not include element
            subset.pop()
            while idx + 1 < len(nums) and nums[idx] == nums[idx+1]:
                idx += 1
            dfs(idx + 1)

        dfs()
        return subsets